Grammar

    0 $accept: program $end

    1 program: tokens

    2 tokens: tokens token
    3       | %empty

    4 token: LIT_INT
    5      | LIT_FLOAT
    6      | LIT_TRUE
    7      | LIT_FALSE
    8      | INT
    9      | BOOL
   10      | FLOAT
   11      | VEC2
   12      | VEC3
   13      | VEC4
   14      | BVEC2
   15      | BVEC3
   16      | BVEC4
   17      | IVEC2
   18      | IVEC3
   19      | IVEC4
   20      | VOID
   21      | ID
   22      | DP3
   23      | LIT
   24      | RSQ
   25      | CONST
   26      | IF
   27      | ELSE
   28      | WHILE
   29      | '='
   30      | '+'
   31      | '-'
   32      | '*'
   33      | '/'
   34      | '^'
   35      | EQ
   36      | NE
   37      | LT
   38      | LE
   39      | GT
   40      | GE
   41      | AND
   42      | OR
   43      | NOT
   44      | '('
   45      | ')'
   46      | '['
   47      | ']'
   48      | '{'
   49      | '}'
   50      | ','
   51      | ';'


Terminals, with rules where they appear

$end (0) 0
'(' (40) 44
')' (41) 45
'*' (42) 32
'+' (43) 30
',' (44) 50
'-' (45) 31
'/' (47) 33
';' (59) 51
'=' (61) 29
'[' (91) 46
']' (93) 47
'^' (94) 34
'{' (123) 48
'}' (125) 49
error (256)
LIT_FLOAT (258) 5
LIT_INT (259) 4
LIT_TRUE (260) 6
LIT_FALSE (261) 7
FLOAT (262) 10
INT (263) 8
BOOL (264) 9
VEC2 (265) 11
VEC3 (266) 12
VEC4 (267) 13
IVEC2 (268) 17
IVEC3 (269) 18
IVEC4 (270) 19
BVEC2 (271) 14
BVEC3 (272) 15
BVEC4 (273) 16
VOID (274) 20
DP3 (275) 22
LIT (276) 23
RSQ (277) 24
CONST (278) 25
IF (279) 26
ELSE (280) 27
WHILE (281) 28
ID (282) 21
EQ (283) 35
NE (284) 36
LT (285) 37
LE (286) 38
GT (287) 39
GE (288) 40
AND (289) 41
OR (290) 42
NOT (291) 43


Nonterminals, with rules where they appear

$accept (51)
    on left: 0
program (52)
    on left: 1, on right: 0
tokens (53)
    on left: 2 3, on right: 1 2
token (54)
    on left: 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
    45 46 47 48 49 50 51, on right: 2


State 0

    0 $accept: . program $end

    $default  reduce using rule 3 (tokens)

    program  go to state 1
    tokens   go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: tokens .
    2 tokens: tokens . token

    LIT_FLOAT  shift, and go to state 4
    LIT_INT    shift, and go to state 5
    LIT_TRUE   shift, and go to state 6
    LIT_FALSE  shift, and go to state 7
    FLOAT      shift, and go to state 8
    INT        shift, and go to state 9
    BOOL       shift, and go to state 10
    VEC2       shift, and go to state 11
    VEC3       shift, and go to state 12
    VEC4       shift, and go to state 13
    IVEC2      shift, and go to state 14
    IVEC3      shift, and go to state 15
    IVEC4      shift, and go to state 16
    BVEC2      shift, and go to state 17
    BVEC3      shift, and go to state 18
    BVEC4      shift, and go to state 19
    VOID       shift, and go to state 20
    DP3        shift, and go to state 21
    LIT        shift, and go to state 22
    RSQ        shift, and go to state 23
    CONST      shift, and go to state 24
    IF         shift, and go to state 25
    ELSE       shift, and go to state 26
    WHILE      shift, and go to state 27
    ID         shift, and go to state 28
    EQ         shift, and go to state 29
    NE         shift, and go to state 30
    LT         shift, and go to state 31
    LE         shift, and go to state 32
    GT         shift, and go to state 33
    GE         shift, and go to state 34
    AND        shift, and go to state 35
    OR         shift, and go to state 36
    NOT        shift, and go to state 37
    '='        shift, and go to state 38
    '+'        shift, and go to state 39
    '-'        shift, and go to state 40
    '*'        shift, and go to state 41
    '/'        shift, and go to state 42
    '^'        shift, and go to state 43
    '('        shift, and go to state 44
    ')'        shift, and go to state 45
    '['        shift, and go to state 46
    ']'        shift, and go to state 47
    '{'        shift, and go to state 48
    '}'        shift, and go to state 49
    ','        shift, and go to state 50
    ';'        shift, and go to state 51

    $default  reduce using rule 1 (program)

    token  go to state 52


State 3

    0 $accept: program $end .

    $default  accept


State 4

    5 token: LIT_FLOAT .

    $default  reduce using rule 5 (token)


State 5

    4 token: LIT_INT .

    $default  reduce using rule 4 (token)


State 6

    6 token: LIT_TRUE .

    $default  reduce using rule 6 (token)


State 7

    7 token: LIT_FALSE .

    $default  reduce using rule 7 (token)


State 8

   10 token: FLOAT .

    $default  reduce using rule 10 (token)


State 9

    8 token: INT .

    $default  reduce using rule 8 (token)


State 10

    9 token: BOOL .

    $default  reduce using rule 9 (token)


State 11

   11 token: VEC2 .

    $default  reduce using rule 11 (token)


State 12

   12 token: VEC3 .

    $default  reduce using rule 12 (token)


State 13

   13 token: VEC4 .

    $default  reduce using rule 13 (token)


State 14

   17 token: IVEC2 .

    $default  reduce using rule 17 (token)


State 15

   18 token: IVEC3 .

    $default  reduce using rule 18 (token)


State 16

   19 token: IVEC4 .

    $default  reduce using rule 19 (token)


State 17

   14 token: BVEC2 .

    $default  reduce using rule 14 (token)


State 18

   15 token: BVEC3 .

    $default  reduce using rule 15 (token)


State 19

   16 token: BVEC4 .

    $default  reduce using rule 16 (token)


State 20

   20 token: VOID .

    $default  reduce using rule 20 (token)


State 21

   22 token: DP3 .

    $default  reduce using rule 22 (token)


State 22

   23 token: LIT .

    $default  reduce using rule 23 (token)


State 23

   24 token: RSQ .

    $default  reduce using rule 24 (token)


State 24

   25 token: CONST .

    $default  reduce using rule 25 (token)


State 25

   26 token: IF .

    $default  reduce using rule 26 (token)


State 26

   27 token: ELSE .

    $default  reduce using rule 27 (token)


State 27

   28 token: WHILE .

    $default  reduce using rule 28 (token)


State 28

   21 token: ID .

    $default  reduce using rule 21 (token)


State 29

   35 token: EQ .

    $default  reduce using rule 35 (token)


State 30

   36 token: NE .

    $default  reduce using rule 36 (token)


State 31

   37 token: LT .

    $default  reduce using rule 37 (token)


State 32

   38 token: LE .

    $default  reduce using rule 38 (token)


State 33

   39 token: GT .

    $default  reduce using rule 39 (token)


State 34

   40 token: GE .

    $default  reduce using rule 40 (token)


State 35

   41 token: AND .

    $default  reduce using rule 41 (token)


State 36

   42 token: OR .

    $default  reduce using rule 42 (token)


State 37

   43 token: NOT .

    $default  reduce using rule 43 (token)


State 38

   29 token: '=' .

    $default  reduce using rule 29 (token)


State 39

   30 token: '+' .

    $default  reduce using rule 30 (token)


State 40

   31 token: '-' .

    $default  reduce using rule 31 (token)


State 41

   32 token: '*' .

    $default  reduce using rule 32 (token)


State 42

   33 token: '/' .

    $default  reduce using rule 33 (token)


State 43

   34 token: '^' .

    $default  reduce using rule 34 (token)


State 44

   44 token: '(' .

    $default  reduce using rule 44 (token)


State 45

   45 token: ')' .

    $default  reduce using rule 45 (token)


State 46

   46 token: '[' .

    $default  reduce using rule 46 (token)


State 47

   47 token: ']' .

    $default  reduce using rule 47 (token)


State 48

   48 token: '{' .

    $default  reduce using rule 48 (token)


State 49

   49 token: '}' .

    $default  reduce using rule 49 (token)


State 50

   50 token: ',' .

    $default  reduce using rule 50 (token)


State 51

   51 token: ';' .

    $default  reduce using rule 51 (token)


State 52

    2 tokens: tokens token .

    $default  reduce using rule 2 (tokens)
